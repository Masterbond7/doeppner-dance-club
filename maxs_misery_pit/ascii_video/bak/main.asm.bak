section .data
    filename db 'ascii_frames/hehehehaw.asv', 0
    buffer   db 10    ; Buffer to store read data
    buflen   equ $ - buffer

section .bss
    fd       resq 1     ; File descriptor

section .text
    global _start

_start:
    ; Open the file
    mov rdi, filename
    mov rsi, 0       ; Flags: O_RDONLY (read-only)
    mov rax, 2       ; syscall number for sys_open
    syscall
    mov qword [fd], rax   ; Save file descriptor

    ; Check for errors in opening the file
    cmp rax, 0
    jl error_exit

read_loop:
    ; Read from the file
    mov rdi, qword [fd]   ; File descriptor
    mov rsi, buffer       ; Buffer to read into
    mov rdx, buflen       ; Number of bytes to read
    mov rax, 0           ; syscall number for sys_read
    syscall

    ; Check for errors in reading from the file
    cmp rax, 0
    jl error_exit

    ; Check if EOF reached
    test rax, rax
    jz close_file

    ; Print the read data (you can replace this with your own processing)
    mov rdi, 1     ; File descriptor for stdout
    mov rax, 1     ; syscall number for sys_write
    mov rdx, rax   ; Length
    syscall

    ; Continue loop
    jmp read_loop

close_file:
    ; Close the file
    mov rdi, qword [fd]   ; File descriptor
    mov rax, 3            ; syscall number for sys_close
    syscall

    ; Exit the program
    mov rax, 60     ; syscall number for sys_exit
    xor rdi, rdi    ; Exit code 0
    syscall

error_exit:
    ; Handle errors (print error message, cleanup, and exit)
    ; Example: print error message and exit with error code
    mov rax, 60     ; syscall number for sys_exit
    mov rdi, -1     ; Error exit code
    syscall
